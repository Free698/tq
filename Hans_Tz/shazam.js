const { cmd } = require('../command');const acrcloud = require('acrcloud');const fs = require('fs');const path = require('path');const acr = new acrcloud({  host: 'identify-eu-west-1.acrcloud.com',  access_key: '716b4ddfa557144ce0a459344fe0c2c9',  access_secret: 'Lz75UbI8g6AzkLRQgTgHyBlaQq9YT5wonr3xhFkf'});cmd({  pattern: "shazam",  alias: ["find"],  use: ".shazam (reply to audio/video)",  category: "tools",  desc: "Identify song/music by audio or video",  filename: __filename}, async (conn, m, { quoted, react, reply }) => {  try {    if (!quoted || !quoted.mimetype || !/audio|video/.test(quoted.mimetype)) {      await react("❌");      return reply("❌ Please reply to an *audio* or *video* to identify the song.");    }    await react("🎧");    const mediaBuffer = await quoted.download();    const tempFile = path.join(__dirname, `../temp-${Date.now()}.mp3`);    fs.writeFileSync(tempFile, mediaBuffer);    reply("🔍 Identifying music, please wait...");    const result = await acr.identify(fs.readFileSync(tempFile));    fs.unlinkSync(tempFile); // cleanup    if (result.status.code !== 0) {      return reply(`❌ Not Found: ${result.status.msg}`);    }    const music = result.metadata.music[0];    const {      title,      artists,      album,      genres,      release_date    } = music;    const songInfo = `👋 Hi @${m.sender.split("@")[0]}, here is your music info:• 📌 *TITLE:* ${title}• 👨‍🎤 *ARTIST:* ${artists?.map(v => v.name).join(', ') || 'NOT FOUND'}• 💾 *ALBUM:* ${album?.name || 'NOT FOUND'}• 🌐 *GENRE:* ${genres?.map(v => v.name).join(', ') || 'NOT FOUND'}• 📆 *RELEASE DATE:* ${release_date || 'NOT FOUND'}    `.trim();    // Get user profile picture    let userPic;    try {      userPic = await conn.profilePictureUrl(m.sender, 'image');    } catch {      userPic = 'https://files.catbox.moe/di5kdx.jpg'; // Fallback    }    // Send message with song info and thumbnail    await conn.sendMessage(m.chat, {      text: songInfo,      contextInfo: {        mentionedJid: [m.sender],        forwardingScore: 5,        isForwarded: true,        forwardedNewsletterMessageInfo: {          newsletterName: "𝐻𝒂𝒏𝒔𝑇𝒆𝒄𝒉",          newsletterJid: "120363352087070233@newsletter"        },        externalAdReply: {          title: "🎧 Music Finder Result",          body: "Powered by VORTEX-XMD | HansTz",          thumbnailUrl: userPic,          mediaType: 1,          renderLargerThumbnail: false, // Small image only          sourceUrl: "https://HansTz-tech.vercel.app"        }      }    }, { quoted: m });  } catch (err) {    console.error(err);    reply("❌ Failed to identify the music.");  }});